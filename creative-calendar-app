import { useState, useEffect } from 'react';
import { 
  format, 
  addMonths, 
  subMonths, 
  startOfMonth, 
  endOfMonth, 
  eachDayOfInterval, 
  isSameMonth, 
  isSameDay
} from 'date-fns';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from "/components/ui/button";
import { Input } from "/components/ui/input";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "/components/ui/card";
import { Label } from "/components/ui/label";
import { 
  Calendar as CalendarIcon, 
  X, 
  ChevronLeft, 
  ChevronRight, 
  Plus, 
  Trash2, 
  Edit2, 
  Star,
  Clock,
  Bell,
  Bookmark as BookmarkIcon,
  Search
} from 'lucide-react';

// Enhanced color options with dedicated important/bookmark colors
const colorOptions = [
  { name: 'Blue', value: 'bg-blue-100 border-blue-300 text-blue-800', isBookmark: false },
  { name: 'Green', value: 'bg-green-100 border-green-300 text-green-800', isBookmark: false },
  { name: 'Red', value: 'bg-red-100 border-red-300 text-red-800', isBookmark: false },
  { name: 'Purple', value: 'bg-purple-100 border-purple-300 text-purple-800', isBookmark: true },
  { name: 'Gold', value: 'bg-amber-100 border-amber-300 text-amber-800', isImportant: true },
];

type Event = {
  id: string;
  title: string;
  date: Date;
  endTime?: Date;
  description: string;
  color: string;
  isImportant: boolean;
  isBookmarked: boolean;
};

export default function CreativeCalendar() {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [events, setEvents] = useState<Event[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [showImportantOnly, setShowImportantOnly] = useState(false);
  const [showBookmarksOnly, setShowBookmarksOnly] = useState(false);

  // Form state
  const [title, setTitle] = useState('');
  const [date, setDate] = useState<Date>(new Date());
  const [startTime, setStartTime] = useState('09:00');
  const [endTime, setEndTime] = useState('10:00');
  const [description, setDescription] = useState('');
  const [color, setColor] = useState(colorOptions[0].value);
  const [isImportant, setIsImportant] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(false);

  // Load events
  useEffect(() => {
    const savedEvents = localStorage.getItem('calendarEvents');
    if (savedEvents) {
      setEvents(JSON.parse(savedEvents).map((e: any) => ({
        ...e,
        date: new Date(e.date),
        endTime: e.endTime ? new Date(e.endTime) : undefined
      })));
    }
  }, []);

  // Save events
  useEffect(() => {
    localStorage.setItem('calendarEvents', JSON.stringify(events));
  }, [events]);

  const filteredEvents = events.filter(event => {
    const matchesSearch = searchQuery === '' || 
      event.title.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesImportant = !showImportantOnly || event.isImportant;
    const matchesBookmarks = !showBookmarksOnly || event.isBookmarked;
    return matchesSearch && matchesImportant && matchesBookmarks;
  });

  const handleAddEvent = () => {
    if (!title) {
      alert('Please enter a title');
      return;
    }

    const [startHours, startMinutes] = startTime.split(':').map(Number);
    const eventDate = new Date(date);
    eventDate.setHours(startHours, startMinutes);

    const newEvent: Event = {
      id: Date.now().toString(),
      title,
      date: eventDate,
      description,
      color,
      isImportant,
      isBookmarked
    };

    if (endTime) {
      const [endHours, endMinutes] = endTime.split(':').map(Number);
      const endDate = new Date(eventDate);
      endDate.setHours(endHours, endMinutes);
      newEvent.endTime = endDate;
    }

    setEvents([...events, newEvent]);
    resetForm();
    setSelectedDate(null);
  };

  const resetForm = () => {
    setTitle('');
    setDescription('');
    setColor(colorOptions[0].value);
    setIsImportant(false);
    setIsBookmarked(false);
  };

  const toggleEventImportance = (id: string) => {
    setEvents(events.map(event => 
      event.id === id ? { 
        ...event, 
        isImportant: !event.isImportant,
        color: !event.isImportant ? colorOptions[4].value : colorOptions[0].value
      } : event
    ));
  };

  const toggleBookmark = (id: string) => {
    setEvents(events.map(event => 
      event.id === id ? { 
        ...event, 
        isBookmarked: !event.isBookmarked,
        color: !event.isBookmarked ? colorOptions[3].value : colorOptions[0].value
      } : event
    ));
  };

  const getEventColorClass = (event: Event) => {
    if (event.isImportant) return colorOptions[4].value;
    if (event.isBookmarked) return colorOptions[3].value;
    return event.color;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 md:p-8">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-800">Creative Calendar</h1>
          <p className="text-gray-500">Manage your important dates</p>
        </div>
        
        <div className="flex items-center gap-2 w-full md:w-auto">
          <div className="relative flex-1 md:w-64">
            <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search events..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          <Button 
            variant={showImportantOnly ? 'default' : 'outline'} 
            onClick={() => setShowImportantOnly(!showImportantOnly)}
          >
            <Star className="mr-2 h-4 w-4" />
            Important
          </Button>
          
          <Button 
            variant={showBookmarksOnly ? 'default' : 'outline'} 
            onClick={() => setShowBookmarksOnly(!showBookmarksOnly)}
          >
            <BookmarkIcon className="mr-2 h-4 w-4" />
            Bookmarks
          </Button>
        </div>
      </div>

      {/* Calendar Grid */}
      <div className="grid grid-cols-7 gap-1">
        {eachDayOfInterval({
          start: startOfMonth(currentMonth),
          end: endOfMonth(currentMonth)
        }).map(day => (
          <div
            key={day.toString()}
            className={`min-h-32 p-2 rounded-lg ${
              isSameMonth(day, currentMonth) ? 'bg-white' : 'bg-gray-50 text-gray-400'
            } ${isSameDay(day, new Date()) ? 'ring-2 ring-blue-500' : ''}`}
            onClick={() => {
              setSelectedDate(day);
              setDate(day);
              setSelectedEvent(null);
            }}
          >
            <div className="flex justify-between">
              <span className={`text-sm ${
                isSameDay(day, new Date()) ? 
                'bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center' : ''
              }`}>
                {format(day, 'd')}
              </span>
            </div>
            
            <div className="mt-1 space-y-1 max-h-24 overflow-y-auto">
              {filteredEvents
                .filter(event => isSameDay(event.date, day))
                .map(event => (
                  <div
                    key={event.id}
                    className={`p-2 text-xs rounded-md border ${getEventColorClass(event)}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedEvent(event);
                    }}
                  >
                    <div className="flex justify-between items-center">
                      <span className="font-medium truncate">{event.title}</span>
                      {event.isImportant && (
                        <Star className="h-3 w-3 text-amber-500 fill-amber-500" />
                      )}
                    </div>
                    {event.endTime && (
                      <div className="flex items-center gap-1 text-xs">
                        <Clock className="h-3 w-3" />
                        {format(event.date, 'h:mm a')} - {format(event.endTime, 'h:mm a')}
                      </div>
                    )}
                  </div>
                ))}
            </div>
          </div>
        ))}
      </div>

      {/* Event Modal */}
      <AnimatePresence>
        {(selectedDate || selectedEvent) && (
          <motion.div 
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: 20, opacity: 0 }}
              className="w-full max-w-md"
            >
              <Card>
                <CardHeader className="flex flex-row justify-between items-start">
                  <CardTitle>
                    {selectedEvent ? 'Event Details' : 'Add New Event'}
                  </CardTitle>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => {
                      setSelectedDate(null);
                      setSelectedEvent(null);
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  {selectedEvent ? (
                    <>
                      <div className={`p-4 rounded-lg ${getEventColorClass(selectedEvent)}`}>
                        <h3 className="text-lg font-bold">{selectedEvent.title}</h3>
                        <p className="text-sm mt-1">
                          {format(selectedEvent.date, 'PPPPp')}
                          {selectedEvent.endTime && ` - ${format(selectedEvent.endTime, 'p')}`}
                        </p>
                      </div>
                      
                      {selectedEvent.description && (
                        <div>
                          <Label>Description</Label>
                          <p className="text-sm">{selectedEvent.description}</p>
                        </div>
                      )}
                    </>
                  ) : (
                    <>
                      <div className="space-y-2">
                        <Label>Event Title *</Label>
                        <Input
                          value={title}
                          onChange={(e) => setTitle(e.target.value)}
                          placeholder="Enter title"
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label>Date</Label>
                          <Input
                            type="date"
                            value={format(date, 'yyyy-MM-dd')}
                            onChange={(e) => setDate(parseISO(e.target.value))}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label>Start Time</Label>
                          <Input
                            type="time"
                            value={startTime}
                            onChange={(e) => setStartTime(e.target.value)}
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <Label>End Time (optional)</Label>
                        <Input
                          type="time"
                          value={endTime}
                          onChange={(e) => setEndTime(e.target.value)}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label>Description (optional)</Label>
                        <Input
                          value={description}
                          onChange={(e) => setDescription(e.target.value)}
                          placeholder="Enter description"
                        />
                      </div>
                      
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            id="important"
                            checked={isImportant}
                            onChange={(e) => setIsImportant(e.target.checked)}
                            className="h-4 w-4 rounded"
                          />
                          <Label htmlFor="important">
                            <Star className="inline h-4 w-4 mr-1" />
                            Important
                          </Label>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            id="bookmark"
                            checked={isBookmarked}
                            onChange={(e) => setIsBookmarked(e.target.checked)}
                            className="h-4 w-4 rounded"
                          />
                          <Label htmlFor="bookmark">
                            <BookmarkIcon className="inline h-4 w-4 mr-1" />
                            Bookmark
                          </Label>
                        </div>
                      </div>
                    </>
                  )}
                </CardContent>
                
                <CardFooter className="flex justify-end gap-2">
                  {selectedEvent ? (
                    <>
                      <Button
                        variant="outline"
                        onClick={() => toggleEventImportance(selectedEvent.id)}
                      >
                        <Star className="mr-2 h-4 w-4" />
                        {selectedEvent.isImportant ? 'Unmark Important' : 'Mark Important'}
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => toggleBookmark(selectedEvent.id)}
                      >
                        <BookmarkIcon className="mr-2 h-4 w-4" />
                        {selectedEvent.isBookmarked ? 'Remove Bookmark' : 'Add Bookmark'}
                      </Button>
                      <Button
                        variant="destructive"
                        onClick={() => {
                          handleDeleteEvent(selectedEvent.id);
                          setSelectedEvent(null);
                        }}
                      >
                        <Trash2 className="mr-2 h-4 w-4" /> Delete
                      </Button>
                    </>
                  ) : (
                    <Button onClick={handleAddEvent}>
                      <Plus className="mr-2 h-4 w-4" /> Add Event
                    </Button>
                  )}
                </CardFooter>
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
